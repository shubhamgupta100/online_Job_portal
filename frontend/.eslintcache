[{"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\index.js":"1","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\App.js":"2","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Login.js":"4","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Logout.js":"5","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Welcome.js":"6","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Navbar.js":"7","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Applications.js":"8","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Profile.js":"9","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Signup.js":"10","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Home.js":"11","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js":"12","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js":"13","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"14","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\Profile.js":"15","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js":"16","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\MessagePopup.js":"17","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\isAuth.js":"18","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\PasswordInput.js":"19","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\apiList.js":"20","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\EmailInput.js":"21","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\HomePage.js":"23","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\MakeCard.js":"24","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Footer.js":"25","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\PageNotFound.js":"26","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\User.js":"27","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Loading.js":"28"},{"size":506,"mtime":1649918849217,"results":"29","hashOfConfig":"30"},{"size":3507,"mtime":1650018696014,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1646828793090,"results":"32","hashOfConfig":"30"},{"size":3720,"mtime":1649917549981,"results":"33","hashOfConfig":"30"},{"size":489,"mtime":1646828793270,"results":"34","hashOfConfig":"30"},{"size":461,"mtime":1650015319085,"results":"35","hashOfConfig":"30"},{"size":4984,"mtime":1649917491502,"results":"36","hashOfConfig":"30"},{"size":8322,"mtime":1650016765080,"results":"37","hashOfConfig":"30"},{"size":9328,"mtime":1650017154531,"results":"38","hashOfConfig":"30"},{"size":16134,"mtime":1650017247980,"results":"39","hashOfConfig":"30"},{"size":22430,"mtime":1650016516553,"results":"40","hashOfConfig":"30"},{"size":27458,"mtime":1650017408638,"results":"41","hashOfConfig":"30"},{"size":8461,"mtime":1649917825122,"results":"42","hashOfConfig":"30"},{"size":26237,"mtime":1650371267572,"results":"43","hashOfConfig":"30"},{"size":5826,"mtime":1650017887718,"results":"44","hashOfConfig":"30"},{"size":25301,"mtime":1650371347942,"results":"45","hashOfConfig":"30"},{"size":510,"mtime":1649918773739,"results":"46","hashOfConfig":"30"},{"size":165,"mtime":1646828793815,"results":"47","hashOfConfig":"30"},{"size":1666,"mtime":1646828793749,"results":"48","hashOfConfig":"30"},{"size":976,"mtime":1650371308472,"results":"49","hashOfConfig":"30"},{"size":1167,"mtime":1646828793642,"results":"50","hashOfConfig":"30"},{"size":3484,"mtime":1649931931907,"results":"51","hashOfConfig":"30"},{"size":6556,"mtime":1650015544319,"results":"52","hashOfConfig":"30"},{"size":1399,"mtime":1649917448120,"results":"53","hashOfConfig":"30"},{"size":1044,"mtime":1649568968105,"results":"54","hashOfConfig":"30"},{"size":819,"mtime":1649917507887,"results":"55","hashOfConfig":"30"},{"size":7658,"mtime":1650016226337,"results":"56","hashOfConfig":"30"},{"size":191,"mtime":1650016343146,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"111femr",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\index.js",[],["124","125"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\App.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\reportWebVitals.js",[],["126","127"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Login.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Logout.js",["128"],"import { useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../App\";\n\nconst Logout = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"type\");\n    setPopup({\n      open: true,\n      severity: \"success\",\n      message: \"Logged out successfully\",\n    });\n  }, []);\n  return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Welcome.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Navbar.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Applications.js",["129"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  // IconButton,\n  // InputAdornment,\n  makeStyles,\n  Paper,\n  // TextField,\n  Typography,\n  Modal,\n  // Slider,\n  // FormControlLabel,\n  // FormGroup,\n  // MenuItem,\n  // Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport Loading from \"./Loading\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [rating, setRating] = useState(application.job.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n  const joinedOn = new Date(application.dateOfJoining);\n\n  const fetchRating = () => {\n    axios\n      .get(`${apiList.rating}?id=${application.job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setRating(response.data.rating);\n        // console.log(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        // console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, jobId: application.job._id },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        // console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        fetchRating();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        // console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        fetchRating();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // const colorSet = {\n  //   applied: \"#3454D1\",\n  //   shortlisted: \"#DC851F\",\n  //   accepted: \"#09BC8A\",\n  //   rejected: \"#D1345B\",\n  //   deleted: \"#B49A67\",\n  //   cancelled: \"#FF8484\",\n  //   finished: \"#4EA5D9\",\n  // };\n\n  return (\n    // <div className=\"dashboard_container\">\n    <div className=\"dashboard\">\n      <Paper className=\"card\" elevation={1}>\n        <div className=\"dashboard-container\">\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <div>\n              <h3 style={{ fontWeight: \"bold\", color: \"#0d6efd\" }}>\n                Company Name: {application.recruiter.companyName}\n              </h3>\n            </div>\n            <div>\n              <h4 style={{ fontWeight: \"bold\" }}>{application.job.title}</h4>\n            </div>\n          </div>\n          <div className=\"recruiter\">\n            <div>Posted By: {application.recruiter.name}</div>\n            <div>Role : {application.job.jobType}</div>\n          </div>\n          <div className=\"salary\">\n            <div>Salary :{application.job.salary}</div>\n            <div>\n              Duration :{\" \"}\n              {application.job.duration !== 0\n                ? `${application.job.duration} month`\n                : `Flexible`}\n            </div>\n          </div>\n          <div className=\"dashboard_skills\">\n            {application.job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </div>\n          <div className=\"applied\">\n            <div item>Applied On: {appliedOn.toLocaleDateString()}</div>\n            {application.status === \"accepted\" ||\n            application.status === \"finished\" ? (\n              <div item>Joined On: {joinedOn.toLocaleDateString()}</div>\n            ) : null}\n          </div>\n\n          <div className=\"btn_container\">\n            <div className=\"btngroup\">\n              <button className=\"btn\">{application.status}</button>\n            </div>\n            {application.status === \"accepted\" ||\n            application.status === \"finished\" ? (\n              <div>\n                <button\n                  className=\"btn_blue\"\n                  onClick={() => {\n                    fetchRating();\n                    setOpen(true);\n                  }}\n                >\n                  Rate Job\n                </button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"30%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Rating\n              name=\"simple-controlled\"\n              style={{ marginBottom: \"30px\" }}\n              value={rating === -1 ? null : rating}\n              onChange={(event, newValue) => {\n                setRating(newValue);\n              }}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => changeRating()}\n            >\n              Submit\n            </Button>\n          </Paper>\n        </Modal>\n      </Paper>\n    </div>\n    // </div>\n  );\n};\n\nconst Applications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.applications, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setApplications(response.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        // console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : (\n        <Grid\n          container\n          item\n          direction=\"column\"\n          alignItems=\"center\"\n          style={{ padding: \"30px\", minHeight: \"93vh\" }}\n        >\n          <Grid item>\n            <h2\n              className=\"border_bottom\"\n              style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n            >\n              Applications\n            </h2>\n          </Grid>\n          <Grid\n            container\n            item\n            xs\n            direction=\"column\"\n            style={{ width: \"100%\" }}\n            alignItems=\"stretch\"\n            justify=\"center\"\n          >\n            {applications.length > 0 ? (\n              applications.map((obj) => (\n                // <Grid item>\n                <div className=\"dashboard_container\">\n                  <ApplicationTile application={obj} />\n                </div>\n                // </Grid>\n              ))\n            ) : (\n              <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n                No Applications Found ! Kindly check on browse section apply\n                internship/fulltime role :)\n              </Typography>\n            )}\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default Applications;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Profile.js",["130"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  // Typography,\n  // Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport Loading from \"./Loading\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid item container className={classes.inputBox} key={key}>\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item style={{ alignSelf: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  // const [userData, setUserData] = useState();\n  // const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setProfileDetails(response.data);\n        if (response.data.education.length > 0) {\n          setEducation(\n            response.data.education.map((edu) => ({\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\n              startYear: edu.startYear ? edu.startYear : \"\",\n              endYear: edu.endYear ? edu.endYear : \"\",\n            }))\n          );\n        }\n        setLoading(false);\n      })\n      .catch((err) => {\n        // console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  // const handleClose = () => {\n  //   setOpen(false);\n  // };\n\n  // const editDetails = () => {\n  //   setOpen(true);\n  // };\n\n  const handleUpdate = () => {\n    // console.log(education);\n\n    let updatedDetails = {\n      ...profileDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        // console.log(err.response);\n      });\n    // setOpen(false);\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : (\n        <Grid\n          container\n          item\n          direction=\"column\"\n          alignItems=\"center\"\n          style={{ padding: \"0 30px\", minHeight: \"93vh\" }}\n        >\n          <Grid item>\n            <h1\n              className=\"border_bottom\"\n              style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n            >\n              Profile\n            </h1>\n          </Grid>\n          <Grid item xs>\n            <Paper\n              style={{\n                padding: \"25px 30px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                borderRadius: \"20px\",\n                border: \"1px solid rgb(224, 222, 222)\",\n              }}\n              elevation={1}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={3}\n              >\n                <Grid item>\n                  <TextField\n                    label=\"Name\"\n                    value={profileDetails.name}\n                    onChange={(event) =>\n                      handleInput(\"name\", event.target.value)\n                    }\n                    className={classes.inputBox}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <MultifieldInput\n                  education={education}\n                  setEducation={setEducation}\n                />\n                <Grid item>\n                  <ChipInput\n                    className={classes.inputBox}\n                    label=\"Skills\"\n                    variant=\"outlined\"\n                    helperText=\"Press enter to add skills\"\n                    value={profileDetails.skills}\n                    onAdd={(chip) =>\n                      setProfileDetails({\n                        ...profileDetails,\n                        skills: [...profileDetails.skills, chip],\n                      })\n                    }\n                    onDelete={(chip, index) => {\n                      let skills = profileDetails.skills;\n                      skills.splice(index, 1);\n                      setProfileDetails({\n                        ...profileDetails,\n                        skills: skills,\n                      });\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <FileUploadInput\n                    className={classes.inputBox}\n                    label=\"Resume (.pdf)\"\n                    icon={<DescriptionIcon />}\n                    uploadTo={apiList.uploadResume}\n                    handleInput={handleInput}\n                    identifier={\"resume\"}\n                    accept=\"application/pdf\"\n                  />\n                </Grid>\n                <Grid item>\n                  <FileUploadInput\n                    className={classes.inputBox}\n                    label=\"Profile Photo (.jpg/.png)\"\n                    icon={<FaceIcon />}\n                    uploadTo={apiList.uploadProfileImage}\n                    handleInput={handleInput}\n                    identifier={\"profile\"}\n                    accept=\"image/*\"\n                  />\n                </Grid>\n              </Grid>\n              <button\n                className=\"profile_update_button\"\n                style={{\n                  marginTop: \"20px\",\n                  paddingLeft: \"30px\",\n                  paddingRight: \"30px\",\n                }}\n                onClick={() => handleUpdate()}\n              >\n                Update Details\n              </button>\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Signup.js",["131","132"],"import { useState, useContext } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  // Typography,\n  makeStyles,\n  Paper,\n  MenuItem,\n  // Input,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport ChipInput from \"material-ui-chip-input\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport PasswordInput from \"../lib/PasswordInput\";\nimport EmailInput from \"../lib/EmailInput\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport isAuth from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"60px 60px\",\n  },\n  inputBox: {\n    width: \"400px\",\n  },\n  submitButton: {\n    width: \"400px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid\n          item\n          container\n          className={classes.inputBox}\n          key={key}\n          style={{ paddingLeft: 0, paddingRight: 0 }}\n        >\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [loggedin, setLoggedin] = useState(isAuth());\n  const [signupDetails, setSignupDetails] = useState({\n    type: \"applicant\",\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n  const [companyName, setCompanyName] = useState(\"\");\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const [inputErrorHandler, setInputErrorHandler] = useState({\n    email: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    password: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    name: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    companyName: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setSignupDetails({\n      ...signupDetails,\n      [key]: value,\n    });\n  };\n\n  const handleInputError = (key, status, message) => {\n    setInputErrorHandler({\n      ...inputErrorHandler,\n      [key]: {\n        required: true,\n        untouched: false,\n        error: status,\n        message: message,\n      },\n    });\n  };\n\n  const handleLogin = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    // console.log(education);\n\n    let updatedDetails = {\n      ...signupDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    // if (verified) {\n    axios\n      .post(apiList.signup, updatedDetails)\n      .then((response) => {\n        localStorage.setItem(\"token\", response.data.token);\n        localStorage.setItem(\"type\", response.data.type);\n        setLoggedin(isAuth());\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Logged in successfully\",\n        });\n        // console.log(response);\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        // console.log(err.response);\n      });\n    // } else {\n    //   setInputErrorHandler(tmpErrorHandler);\n    //   setPopup({\n    //     open: true,\n    //     severity: \"error\",\n    //     message: \"Incorrect Input\",\n    //   });\n    // }\n  };\n\n  const handleLoginRecruiter = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    let updatedDetails = {\n      ...signupDetails,\n    };\n    if (companyName !== \"\") {\n      updatedDetails = {\n        ...signupDetails,\n        companyName: companyName,\n      };\n    }\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    // console.log(updatedDetails);\n\n    if (verified) {\n      axios\n        .post(apiList.signup, updatedDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          // console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          // console.log(err.response);\n        });\n    } else {\n      setInputErrorHandler(tmpErrorHandler);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  return loggedin ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <div className=\"signUp_container\">\n      <Paper elevation={1} className=\"card\">\n        <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\n          <Grid item>\n            <h1 className=\"border_bottom\" style={{ fontWeight: \"bolder\" }}>\n              Sign Up\n            </h1>\n          </Grid>\n          <Grid item>\n            <TextField\n              select\n              label=\"Category\"\n              variant=\"outlined\"\n              className={classes.inputBox}\n              value={signupDetails.type}\n              onChange={(event) => {\n                handleInput(\"type\", event.target.value);\n              }}\n            >\n              <MenuItem value=\"applicant\">Applicant</MenuItem>\n              <MenuItem value=\"recruiter\">Recruiter</MenuItem>\n            </TextField>\n          </Grid>\n          <Grid item>\n            <TextField\n              label=\"Name\"\n              value={signupDetails.name}\n              onChange={(event) => handleInput(\"name\", event.target.value)}\n              className={classes.inputBox}\n              error={inputErrorHandler.name.error}\n              helperText={inputErrorHandler.name.message}\n              onBlur={(event) => {\n                if (event.target.value === \"\") {\n                  handleInputError(\"name\", true, \"Name is required\");\n                } else {\n                  handleInputError(\"name\", false, \"\");\n                }\n              }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <EmailInput\n              label=\"Email\"\n              value={signupDetails.email}\n              onChange={(event) => handleInput(\"email\", event.target.value)}\n              inputErrorHandler={inputErrorHandler}\n              handleInputError={handleInputError}\n              className={classes.inputBox}\n              required={true}\n            />\n          </Grid>\n          <Grid item>\n            <PasswordInput\n              label=\"Password\"\n              value={signupDetails.password}\n              onChange={(event) => handleInput(\"password\", event.target.value)}\n              className={classes.inputBox}\n              error={inputErrorHandler.password.error}\n              helperText={inputErrorHandler.password.message}\n              onBlur={(event) => {\n                if (event.target.value === \"\") {\n                  handleInputError(\"password\", true, \"Password is required\");\n                } else {\n                  handleInputError(\"password\", false, \"\");\n                }\n              }}\n            />\n          </Grid>\n          {signupDetails.type === \"applicant\" ? (\n            <>\n              <MultifieldInput\n                education={education}\n                setEducation={setEducation}\n              />\n              <Grid item>\n                <ChipInput\n                  className={classes.inputBox}\n                  label=\"Skills\"\n                  variant=\"outlined\"\n                  helperText=\"Press enter to add skills\"\n                  onChange={(chips) =>\n                    setSignupDetails({ ...signupDetails, skills: chips })\n                  }\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Resume (.pdf)\"\n                  icon={<DescriptionIcon />}\n                  // value={files.resume}\n                  // onChange={(event) =>\n                  //   setFiles({\n                  //     ...files,\n                  //     resume: event.target.files[0],\n                  //   })\n                  // }\n                  uploadTo={apiList.uploadResume}\n                  handleInput={handleInput}\n                  identifier={\"resume\"}\n                  accept=\"application/pdf\"\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Profile Photo (.jpg/.png)\"\n                  icon={<FaceIcon />}\n                  // value={files.profileImage}\n                  // onChange={(event) =>\n                  //   setFiles({\n                  //     ...files,\n                  //     profileImage: event.target.files[0],\n                  //   })\n                  // }\n                  uploadTo={apiList.uploadProfileImage}\n                  handleInput={handleInput}\n                  identifier={\"profile\"}\n                  accept=\"image/*\"\n                />\n              </Grid>\n            </>\n          ) : (\n            <>\n              <Grid item style={{ width: \"100%\" }}>\n                <Grid item style={{ marginBottom: \"30px\" }}>\n                  <TextField\n                    label=\"Company Name\"\n                    value={signupDetails.companyName}\n                    onChange={(event) =>\n                      handleInput(\"companyName\", event.target.value)\n                    }\n                    className={classes.inputBox}\n                    error={inputErrorHandler.name.error}\n                    helperText={inputErrorHandler.companyName.message}\n                    onBlur={(event) => {\n                      if (event.target.value === \"\") {\n                        handleInputError(\n                          \"companyName\",\n                          true,\n                          \"Company Name is required\"\n                        );\n                      } else {\n                        handleInputError(\"companyName\", false, \"\");\n                      }\n                    }}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item style={{ marginBottom: \"30px\" }}>\n                  <TextField\n                    label=\"Bio (upto 250 words)\"\n                    multiline\n                    rows={8}\n                    style={{ width: \"100%\" }}\n                    variant=\"outlined\"\n                    value={signupDetails.bio}\n                    onChange={(event) => {\n                      if (\n                        event.target.value.split(\" \").filter(function (n) {\n                          return n !== \"\";\n                        }).length <= 250\n                      ) {\n                        handleInput(\"bio\", event.target.value);\n                      }\n                    }}\n                  />\n                </Grid>\n\n                <Grid item>\n                  <PhoneInput\n                    country={\"in\"}\n                    value={phone}\n                    onChange={(phone) => setPhone(phone)}\n                  />\n                </Grid>\n              </Grid>\n            </>\n          )}\n\n          <Grid item>\n            <button\n              onClick={() => {\n                signupDetails.type === \"applicant\"\n                  ? handleLogin()\n                  : handleLoginRecruiter();\n              }}\n              className=\"btn\"\n            >\n              Signup\n            </button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nexport default Login;\n\n// {/* <Grid item>\n//           <PasswordInput\n//             label=\"Re-enter Password\"\n//             value={signupDetails.tmpPassword}\n//             onChange={(event) => handleInput(\"tmpPassword\", event.target.value)}\n//             className={classes.inputBox}\n//             labelWidth={140}\n//             helperText={inputErrorHandler.tmpPassword.message}\n//             error={inputErrorHandler.tmpPassword.error}\n//             onBlur={(event) => {\n//               if (event.target.value !== signupDetails.password) {\n//                 handleInputError(\n//                   \"tmpPassword\",\n//                   true,\n//                   \"Passwords are not same.\"\n//                 );\n//               }\n//             }}\n//           />\n//         </Grid> */}\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Home.js",["133"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  // FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\n// import Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n// import FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\nimport Loading from \"./Loading\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  console.log(\"Jobs\", job);\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    // console.log(job._id);\n    // console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n\n  return (\n    <div className=\"job_card\">\n      <Paper className=\"card\" elevation={1}>\n        <div>\n          <div>\n            <div className=\"job_title\">\n              <div>\n                <h4>{job.recruiter.companyName}</h4>\n              </div>\n              <div>\n                <h5>{job.title}</h5>\n              </div>\n              <div item>\n                <Rating\n                  value={job.rating !== -1 ? job.rating : null}\n                  readOnly\n                />\n              </div>\n            </div>\n\n            <div className=\"job_type\">\n              <div> Role : {job.jobType}</div>\n              <div>Salary : &#8377; {job.salary} per month</div>\n              <div>\n                Duration :{\" \"}\n                {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n              </div>\n            </div>\n\n            <div className=\"posted_by\">\n              <div>Posted By : {job.recruiter.name}</div>\n              <div>LinkedIn :Click Here</div>\n              <div>Application Deadline : {deadline}</div>\n            </div>\n\n            <div className=\"apply_job\">\n              <div>\n                {job.skillsets.map((skill) => (\n                  <Chip\n                    label={skill}\n                    style={{\n                      margin: \"4px\",\n                      fontSize: \"16px\",\n                    }}\n                  />\n                ))}\n              </div>\n\n              <div className=\"apply\">\n                <button\n                  onClick={() => {\n                    setOpen(true);\n                  }}\n                  disabled={userType() === \"recruiter\"}\n                >\n                  Apply\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"50%\",\n              alignItems: \"center\",\n            }}\n          >\n            <TextField\n              label=\"Write SOP (upto 250 words)\"\n              multiline\n              rows={8}\n              style={{ width: \"100%\", marginBottom: \"30px\" }}\n              variant=\"outlined\"\n              value={sop}\n              onChange={(event) => {\n                if (\n                  event.target.value.split(\" \").filter(function (n) {\n                    return n !== \"\";\n                  }).length <= 250\n                ) {\n                  setSop(event.target.value);\n                }\n              }}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => handleApply()}\n            >\n              Submit\n            </Button>\n          </Paper>\n        </Modal>\n      </Paper>\n    </div>\n  );\n};\n\nconst FilterPopup = (props) => {\n  // const classes = useStyles();\n  const {\n    //  open, handleClose,\n    searchOptions,\n    setSearchOptions,\n    getData,\n  } = props;\n  return (\n    <div className=\"filter_job\">\n      <Paper\n        className=\"card\"\n        // style={{\n        //   padding: \"50px\",\n        //   outline: \"none\",\n        //   minWidth: \"50%\",\n        // }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={3}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"Salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={3}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <button onClick={() => getData()}>Apply</button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    skill: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.skill !== \"\") {\n      searchParams = [...searchParams, `skill=${searchOptions.skill}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    // console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n        setLoading(false);\n      })\n      .catch((err) => {\n        // console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : (\n        <div className=\"main_conatiner\">\n          <div className=\"home-container\">\n            {jobs.length > 0 ? (\n              <div className=\"searchJob\">\n                <TextField\n                  label=\"Search Jobs with job title\"\n                  value={searchOptions.query}\n                  onChange={(event) =>\n                    setSearchOptions({\n                      ...searchOptions,\n                      query: event.target.value,\n                    })\n                  }\n                  onKeyPress={(ev) => {\n                    if (ev.key === \"Enter\") {\n                      getData();\n                    }\n                  }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment>\n                        <IconButton onClick={() => getData()}>\n                          <SearchIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                  style={{ width: \"300px\", marginLeft: \"20px\" }}\n                  variant=\"outlined\"\n                />\n\n                <TextField\n                  label=\"Search Jobs with skills\"\n                  value={searchOptions.skill}\n                  onChange={(event) =>\n                    setSearchOptions({\n                      ...searchOptions,\n                      skill: event.target.value,\n                    })\n                  }\n                  onKeyPress={(ev) => {\n                    if (ev.key === \"Enter\") {\n                      getData();\n                    }\n                  }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment>\n                        <IconButton onClick={() => getData()}>\n                          <SearchIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                  style={{ width: \"300px\", marginLeft: \"10px\" }}\n                  variant=\"outlined\"\n                />\n              </div>\n            ) : (\n              \"\"\n            )}\n            <div className=\"job-container\">\n              {jobs.length > 0 ? (\n                jobs.map((job) => {\n                  return <JobTile job={job} />;\n                })\n              ) : (\n                <div className=\"sorry_line\">\n                  <h2>Sorry We don't have matching jobs :) </h2>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <FilterPopup\n            open={filterOpen}\n            searchOptions={searchOptions}\n            setSearchOptions={setSearchOptions}\n            handleClose={() => setFilterOpen(false)}\n            getData={() => {\n              getData();\n              setFilterOpen(false);\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js",["134"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  // FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\n// import Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\nimport Loading from \"../Loading\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  // console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    history.push(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    // console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <div\n      style={{\n        width: \"70%\",\n        position: \"relative\",\n        margin: \"auto\",\n        padding: \"10px\",\n      }}\n    >\n      <Paper\n        style={{\n          padding: \"20px\",\n          outline: \"none\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderRadius: \"10px\",\n          border: \"1px solid rgb(224, 222, 222)\",\n        }}\n        elevation={1}\n      >\n        <Grid container>\n          <Grid container item xs={12} spacing={1} direction=\"column\">\n            <div className=\"recruiter_title_section\">\n              <div>\n                <h3 style={{ fontWeight: \"bolder\" }}>{job.title}</h3>\n              </div>\n              <div>\n                <Rating\n                  value={job.rating !== -1 ? job.rating : null}\n                  readOnly\n                />\n              </div>\n            </div>\n\n            <div className=\"recruiter_job_type\">\n              <div>Role : {job.jobType}</div>\n              <div>Salary : &#8377; {job.salary} per month</div>\n              <div item>\n                Duration :{\" \"}\n                {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n              </div>\n            </div>\n\n            <div className=\"recruiter_postion\">\n              <div>Date Of Posting: {postedOn.toLocaleDateString()}</div>\n\n              <div>Number of Applicants: {job.maxApplicants}</div>\n              <div>\n                Remaining Number of Positions:{\" \"}\n                {job.maxPositions - job.acceptedCandidates}\n              </div>\n            </div>\n\n            <div>\n              {job.skillsets.map((skill) => (\n                <Chip\n                  label={skill}\n                  style={{\n                    marginRight: \"5px\",\n                    fontFamily: \"Ovo\",\n                    fontWeight: \"bolder\",\n                  }}\n                />\n              ))}\n            </div>\n\n            <div className=\"recruiter_button_container\">\n              <div>\n                <button\n                  className=\"view\"\n                  onClick={() => handleClick(`/job/applications/${job._id}`)}\n                >\n                  View Applications\n                </button>\n              </div>\n\n              <div>\n                <button\n                  onClick={() => {\n                    setOpenUpdate(true);\n                  }}\n                  style={{\n                    background: \"#FC7A1E\",\n                    color: \"#fff\",\n                  }}\n                >\n                  Update Details\n                </button>\n              </div>\n\n              <div>\n                <button\n                  className=\"delete\"\n                  onClick={() => {\n                    setOpen(true);\n                  }}\n                >\n                  Delete Job\n                </button>\n              </div>\n            </div>\n          </Grid>\n        </Grid>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"30%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n              Are you sure?\n            </Typography>\n            <Grid container justify=\"center\" spacing={5}>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleDelete()}\n                >\n                  Delete\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleClose()}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Modal>\n        <Modal\n          open={openUpdate}\n          onClose={handleCloseUpdate}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"30%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n              Update Details\n            </Typography>\n            <Grid\n              container\n              direction=\"column\"\n              spacing={3}\n              style={{ margin: \"10px\" }}\n            >\n              <Grid item>\n                <TextField\n                  label=\"Application Deadline\"\n                  type=\"datetime-local\"\n                  value={jobDetails.deadline.substr(0, 16)}\n                  onChange={(event) => {\n                    handleInput(\"deadline\", event.target.value);\n                  }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Maximum Number Of Applicants\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                  value={jobDetails.maxApplicants}\n                  onChange={(event) => {\n                    handleInput(\"maxApplicants\", event.target.value);\n                  }}\n                  InputProps={{ inputProps: { min: 1 } }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Positions Available\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                  value={jobDetails.maxPositions}\n                  onChange={(event) => {\n                    handleInput(\"maxPositions\", event.target.value);\n                  }}\n                  InputProps={{ inputProps: { min: 1 } }}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\" spacing={5}>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleJobUpdate()}\n                >\n                  Update\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleCloseUpdate()}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Modal>\n      </Paper>\n    </div>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] !== 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] !== 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration !== \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    // console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    // console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setJobs(response.data);\n        setLoading(false);\n      })\n      .catch((err) => {\n        // console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : (\n        <>\n          {\" \"}\n          <Grid\n            container\n            item\n            direction=\"column\"\n            alignItems=\"center\"\n            style={{ padding: \"30px\", minHeight: \"93vh\" }}\n          >\n            <Grid\n              item\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item xs>\n                <h1\n                  className=\"border_bottom\"\n                  style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n                >\n                  My Jobs\n                </h1>\n              </Grid>\n              <Grid item xs>\n                <TextField\n                  label=\"Search Jobs\"\n                  value={searchOptions.query}\n                  onChange={(event) =>\n                    setSearchOptions({\n                      ...searchOptions,\n                      query: event.target.value,\n                    })\n                  }\n                  onKeyPress={(ev) => {\n                    if (ev.key === \"Enter\") {\n                      getData();\n                    }\n                  }}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment>\n                        <IconButton onClick={() => getData()}>\n                          <SearchIcon />\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                  style={{ width: \"500px\" }}\n                  variant=\"outlined\"\n                />\n              </Grid>\n              <Grid item>\n                <IconButton onClick={() => setFilterOpen(true)}>\n                  <FilterListIcon />\n                </IconButton>\n              </Grid>\n            </Grid>\n\n            <Grid\n              container\n              item\n              xs\n              direction=\"column\"\n              alignItems=\"stretch\"\n              justify=\"center\"\n            >\n              {jobs.length > 0 ? (\n                jobs.map((job) => {\n                  return <JobTile job={job} getData={getData} />;\n                })\n              ) : (\n                <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n                  No jobs found\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n          <FilterPopup\n            open={filterOpen}\n            searchOptions={searchOptions}\n            setSearchOptions={setSearchOptions}\n            handleClose={() => setFilterOpen(false)}\n            getData={() => {\n              getData();\n              setFilterOpen(false);\n            }}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MyJobs;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["135","136","137"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\Profile.js",["138"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  // Button,\n  Grid,\n  // Typography,\n  // Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\nimport Loading from \"../Loading\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [loading, setLoading] = useState(true);\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        // console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber);\n        setLoading(false);\n      })\n      .catch((err) => {\n        // console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleUpdate = () => {\n    let updatedDetails = {\n      ...profileDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        // console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : (\n        <Grid\n          container\n          item\n          direction=\"column\"\n          alignItems=\"center\"\n          style={{ padding: \"30px\", minHeight: \"93vh\" }}\n        >\n          <Grid item>\n            <h1\n              className=\"border_bottom\"\n              style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n            >\n              Profile\n            </h1>\n          </Grid>\n          <Grid item xs style={{ width: \"70%\" }}>\n            <Paper\n              style={{\n                padding: \"30px 30px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                borderTopLeftRadius: \"50px\",\n                borderBottomRightRadius: \"50px\",\n                border: \"1px solid rgb(224, 222, 222)\",\n                //   width: \"60%\",\n              }}\n              elevation={1}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={3}\n              >\n                <Grid item>\n                  <TextField\n                    label=\"Name\"\n                    value={profileDetails.name}\n                    onChange={(event) =>\n                      handleInput(\"name\", event.target.value)\n                    }\n                    className={classes.inputBox}\n                    variant=\"outlined\"\n                    fullWidth\n                    style={{ width: \"100%\" }}\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Bio (upto 250 words)\"\n                    multiline\n                    rows={8}\n                    style={{ width: \"100%\" }}\n                    variant=\"outlined\"\n                    value={profileDetails.bio}\n                    onChange={(event) => {\n                      if (\n                        event.target.value.split(\" \").filter(function (n) {\n                          return n !== \"\";\n                        }).length <= 250\n                      ) {\n                        handleInput(\"bio\", event.target.value);\n                      }\n                    }}\n                  />\n                </Grid>\n                <Grid\n                  item\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <PhoneInput\n                    country={\"in\"}\n                    value={phone}\n                    onChange={(phone) => setPhone(phone)}\n                    style={{ width: \"auto\" }}\n                  />\n                </Grid>\n              </Grid>\n              <button\n                className=\"profile_btn_recruiter\"\n                // variant=\"contained\"\n                // color=\"primary\"\n                // style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n                onClick={() => handleUpdate()}\n              >\n                Update Details\n              </button>\n            </Paper>\n          </Grid>\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js",["139","140"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\MessagePopup.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\HomePage.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\MakeCard.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Footer.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\PageNotFound.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\User.js",["141","142"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport Loading from \"../Loading\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst UserTitle = (props) => {\r\n  const classes = useStyles();\r\n  const { user } = props;\r\n  //   console.log(\"user\", user);\r\n  const setPopup = useContext(SetPopupContext);\r\n  const getResume = () => {\r\n    if (user.resume && user.resume !== \"\") {\r\n      //   const address = `${server}${user.resume}`;\r\n      const address = `${user.resume}`;\r\n      // console.log(address);\r\n      axios(address, {\r\n        method: \"GET\",\r\n        responseType: \"blob\",\r\n      })\r\n        .then((response) => {\r\n          const file = new Blob([response.data], { type: \"application/pdf\" });\r\n          const fileURL = URL.createObjectURL(file);\r\n          window.open(fileURL);\r\n        })\r\n        .catch((error) => {\r\n          // console.log(error);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Error\",\r\n          });\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        position: \"relative\",\r\n        margin: \"auto\",\r\n        paddingLeft: \"30px\",\r\n      }}\r\n    >\r\n      <Paper\r\n        style={{\r\n          padding: \"20px\",\r\n          outline: \"none\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          borderRadius: \"10px\",\r\n          border: \"1px solid rgb(224, 222, 222)\",\r\n          marginBottom: \"20px\",\r\n          //   paddingLeft: \"30px\",\r\n          width: \"900px\",\r\n        }}\r\n        elevation={1}\r\n      >\r\n        <Grid container>\r\n          <Grid\r\n            item\r\n            xs={2}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              marginRight: \"20px\",\r\n            }}\r\n          >\r\n            <Avatar\r\n              //   src={`${server}${user.profile}`}\r\n              src={`${user.profile}`}\r\n              className={classes.avatar}\r\n              style={{\r\n                height: \"130px\",\r\n                // width: \"1500x\",\r\n                width: \"110px\",\r\n                // marginLeft: \"-100px\",\r\n                // marginRight: \"30px\",\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            item\r\n            xs={8}\r\n            spacing={0}\r\n            direction=\"column\"\r\n            style={{ marginLeft: \"20px\" }}\r\n          >\r\n            <div className=\"recruiter_title_section\">\r\n              <div>\r\n                <span>Name: {user.name}</span>\r\n              </div>\r\n              <div>\r\n                <b>{user.email}</b>\r\n              </div>\r\n              <div>\r\n                <Rating\r\n                  value={user.rating !== -1 ? user.rating : null}\r\n                  readOnly\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"recruiter_job_type\">\r\n              <div>\r\n                Education:{\" \"}\r\n                {user.education\r\n                  .map((edu) => {\r\n                    return `${edu.institutionName} (${edu.startYear}-${\r\n                      edu.endYear ? edu.endYear : \"Ongoing\"\r\n                    })`;\r\n                  })\r\n                  .join(\", \")}\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <div style={{ marginTop: \"8px\" }}>\r\n                {user.skills.map((skill) => (\r\n                  <Chip\r\n                    key={skill}\r\n                    label={skill}\r\n                    style={{\r\n                      marginRight: \"2px\",\r\n                      fontWeight: \"bolder\",\r\n                      fontFamily: \"Ovo\",\r\n                    }}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"emp_btn_container\" style={{ margin: \"5px\" }}>\r\n              <div>\r\n                <button className=\"resume_download\" onClick={() => getResume()}>\r\n                  Download Resume\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst User = (props) => {\r\n  const [users, setUsers] = useState([]);\r\n  //   const [filterOpen, setFilterOpen] = useState(false);\r\n  const [skill, setSkill] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let address = apiList.users;\r\n    if (skill !== \"\") {\r\n      address = `${address}?skill=${skill}`;\r\n    }\r\n    // console.log(\"address\", address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setUsers(response.data.users);\r\n        setLoading(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div className=\"main_user_conatiner\">\r\n          <div>\r\n            <div\r\n              className=\"searchJob\"\r\n              style={{ marginBottom: \"20px\", marginLeft: \"40px\" }}\r\n            >\r\n              <TextField\r\n                label=\"Search Jobs with skills\"\r\n                value={skill}\r\n                onChange={(event) => setSkill(event.target.value)}\r\n                onKeyPress={(ev) => {\r\n                  if (ev.key === \"Enter\") {\r\n                    getData();\r\n                  }\r\n                }}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment>\r\n                      <IconButton onClick={() => getData()}>\r\n                        <SearchIcon />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n                style={{ width: \"600px\", marginLeft: \"10px\" }}\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"job-container\">\r\n              {users.length > 0 ? (\r\n                users.map((user) => {\r\n                  return <UserTitle key={user._id} user={user} />;\r\n                })\r\n              ) : (\r\n                <div className=\"sorry_line\" style={{ marginLeft: \"100px\" }}>\r\n                  <h2>Oops ! No User Exists:) </h2>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Loading.js",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"143","replacedBy":"147"},{"ruleId":"145","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":16,"column":6,"nodeType":"151","endLine":16,"endColumn":8,"suggestions":"152"},{"ruleId":"149","severity":1,"message":"153","line":241,"column":6,"nodeType":"151","endLine":241,"endColumn":8,"suggestions":"154"},{"ruleId":"149","severity":1,"message":"153","line":138,"column":6,"nodeType":"151","endLine":138,"endColumn":8,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":136,"column":23,"nodeType":"158","messageId":"159","endLine":136,"endColumn":37},{"ruleId":"156","severity":1,"message":"160","line":223,"column":11,"nodeType":"158","messageId":"159","endLine":223,"endColumn":19},{"ruleId":"149","severity":1,"message":"153","line":576,"column":6,"nodeType":"151","endLine":576,"endColumn":8,"suggestions":"161"},{"ruleId":"149","severity":1,"message":"153","line":758,"column":6,"nodeType":"151","endLine":758,"endColumn":8,"suggestions":"162"},{"ruleId":"156","severity":1,"message":"163","line":29,"column":19,"nodeType":"158","messageId":"159","endLine":29,"endColumn":25},{"ruleId":"156","severity":1,"message":"164","line":451,"column":9,"nodeType":"158","messageId":"159","endLine":451,"endColumn":17},{"ruleId":"149","severity":1,"message":"153","line":762,"column":6,"nodeType":"151","endLine":762,"endColumn":8,"suggestions":"165"},{"ruleId":"149","severity":1,"message":"153","line":54,"column":6,"nodeType":"151","endLine":54,"endColumn":8,"suggestions":"166"},{"ruleId":"156","severity":1,"message":"163","line":29,"column":19,"nodeType":"158","messageId":"159","endLine":29,"endColumn":25},{"ruleId":"149","severity":1,"message":"153","line":757,"column":6,"nodeType":"151","endLine":757,"endColumn":8,"suggestions":"167"},{"ruleId":"156","severity":1,"message":"163","line":18,"column":19,"nodeType":"158","messageId":"159","endLine":18,"endColumn":25},{"ruleId":"149","severity":1,"message":"153","line":199,"column":6,"nodeType":"151","endLine":199,"endColumn":8,"suggestions":"168"},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],["169"],["170"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.","ArrayExpression",["171"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["172"],["173"],"no-unused-vars","'setCompanyName' is assigned a value but never used.","Identifier","unusedVar","'verified' is assigned a value but never used.",["174"],["175"],"'server' is defined but never used.","'colorSet' is assigned a value but never used.",["176"],["177"],["178"],["179"],"no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"182","fix":"184"},{"desc":"182","fix":"185"},{"desc":"182","fix":"186"},{"desc":"182","fix":"187"},{"desc":"182","fix":"188"},{"desc":"182","fix":"189"},{"desc":"182","fix":"190"},"Update the dependencies array to be: [setPopup]",{"range":"191","text":"192"},"Update the dependencies array to be: [getData]",{"range":"193","text":"194"},{"range":"195","text":"194"},{"range":"196","text":"194"},{"range":"197","text":"194"},{"range":"198","text":"194"},{"range":"199","text":"194"},{"range":"200","text":"194"},{"range":"201","text":"194"},[422,424],"[setPopup]",[6451,6453],"[getData]",[3496,3498],[17188,17190],[22626,22628],[23081,23083],[1129,1131],[21918,21920],[5395,5397]]