[{"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\index.js":"1","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\App.js":"2","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Login.js":"4","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Logout.js":"5","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Welcome.js":"6","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Navbar.js":"7","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Applications.js":"8","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Profile.js":"9","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Signup.js":"10","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Home.js":"11","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js":"12","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js":"13","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"14","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\Profile.js":"15","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js":"16","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\MessagePopup.js":"17","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\isAuth.js":"18","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\PasswordInput.js":"19","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\apiList.js":"20","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\EmailInput.js":"21","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\HomePage.js":"23","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\MakeCard.js":"24","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Footer.js":"25"},{"size":500,"mtime":1646828793051,"results":"26","hashOfConfig":"27"},{"size":3348,"mtime":1649569498743,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1646828793090,"results":"29","hashOfConfig":"27"},{"size":3705,"mtime":1649570039694,"results":"30","hashOfConfig":"27"},{"size":489,"mtime":1646828793270,"results":"31","hashOfConfig":"27"},{"size":625,"mtime":1649569651129,"results":"32","hashOfConfig":"27"},{"size":4897,"mtime":1649569934368,"results":"33","hashOfConfig":"27"},{"size":7621,"mtime":1649508049690,"results":"34","hashOfConfig":"27"},{"size":8750,"mtime":1649508114350,"results":"35","hashOfConfig":"27"},{"size":14604,"mtime":1649570068676,"results":"36","hashOfConfig":"27"},{"size":20854,"mtime":1649424116323,"results":"37","hashOfConfig":"27"},{"size":26877,"mtime":1649503127053,"results":"38","hashOfConfig":"27"},{"size":8457,"mtime":1649500190017,"results":"39","hashOfConfig":"27"},{"size":25295,"mtime":1649570287848,"results":"40","hashOfConfig":"27"},{"size":5339,"mtime":1649499980201,"results":"41","hashOfConfig":"27"},{"size":23512,"mtime":1649570604430,"results":"42","hashOfConfig":"27"},{"size":503,"mtime":1646828793715,"results":"43","hashOfConfig":"27"},{"size":165,"mtime":1646828793815,"results":"44","hashOfConfig":"27"},{"size":1666,"mtime":1646828793749,"results":"45","hashOfConfig":"27"},{"size":753,"mtime":1649570724942,"results":"46","hashOfConfig":"27"},{"size":1167,"mtime":1646828793642,"results":"47","hashOfConfig":"27"},{"size":3279,"mtime":1646828793678,"results":"48","hashOfConfig":"27"},{"size":5853,"mtime":1649569736914,"results":"49","hashOfConfig":"27"},{"size":1406,"mtime":1649566612320,"results":"50","hashOfConfig":"27"},{"size":1044,"mtime":1649568968105,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"111femr",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\index.js",[],["111","112"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\App.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Login.js",["113","114","115"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Logout.js",["116"],"import { useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../App\";\n\nconst Logout = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"type\");\n    setPopup({\n      open: true,\n      severity: \"success\",\n      message: \"Logged out successfully\",\n    });\n  }, []);\n  return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Welcome.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Navbar.js",["117"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Applications.js",["118","119","120","121","122","123","124","125","126","127"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [rating, setRating] = useState(application.job.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n  const joinedOn = new Date(application.dateOfJoining);\n\n  const fetchRating = () => {\n    axios\n      .get(`${apiList.rating}?id=${application.job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setRating(response.data.rating);\n        console.log(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, jobId: application.job._id },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        fetchRating();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        fetchRating();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  return (\n    // <div className=\"dashboard_container\">\n    <div className=\"dashboard\">\n      <Paper className=\"card\" elevation={1}>\n        <div className=\"dashboard-container\">\n          <div>\n            <h2 style={{ fontWeight: \"bolder\" }}>{application.job.title}</h2>\n          </div>\n          <div className=\"recruiter\">\n            <div>Posted By: {application.recruiter.name}</div>\n            <div>Role : {application.job.jobType}</div>\n          </div>\n          <div className=\"salary\">\n            <div>Salary :{application.job.salary}</div>\n            <div>\n              Duration :{\" \"}\n              {application.job.duration !== 0\n                ? `${application.job.duration} month`\n                : `Flexible`}\n            </div>\n          </div>\n          <div className=\"dashboard_skills\">\n            {application.job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </div>\n          <div className=\"applied\">\n            <div item>Applied On: {appliedOn.toLocaleDateString()}</div>\n            {application.status === \"accepted\" ||\n            application.status === \"finished\" ? (\n              <div item>Joined On: {joinedOn.toLocaleDateString()}</div>\n            ) : null}\n          </div>\n\n          <div className=\"btn_container\">\n            <div className=\"btngroup\">\n              <button className=\"btn\">{application.status}</button>\n            </div>\n            {application.status === \"accepted\" ||\n            application.status === \"finished\" ? (\n              <div>\n                <button\n                  className=\"btn_blue\"\n                  onClick={() => {\n                    fetchRating();\n                    setOpen(true);\n                  }}\n                >\n                  Rate Job\n                </button>\n              </div>\n            ) : null}\n          </div>\n        </div>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"30%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Rating\n              name=\"simple-controlled\"\n              style={{ marginBottom: \"30px\" }}\n              value={rating === -1 ? null : rating}\n              onChange={(event, newValue) => {\n                setRating(newValue);\n              }}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => changeRating()}\n            >\n              Submit\n            </Button>\n          </Paper>\n        </Modal>\n      </Paper>\n    </div>\n    // </div>\n  );\n};\n\nconst Applications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.applications, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\n    >\n      <Grid item>\n        <h2\n          className=\"border_bottom\"\n          style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n        >\n          Applications\n        </h2>\n      </Grid>\n      <Grid\n        container\n        item\n        xs\n        direction=\"column\"\n        style={{ width: \"100%\" }}\n        alignItems=\"stretch\"\n        justify=\"center\"\n      >\n        {applications.length > 0 ? (\n          applications.map((obj) => (\n            // <Grid item>\n            <div className=\"dashboard_container\">\n              <ApplicationTile application={obj} />\n            </div>\n            // </Grid>\n          ))\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n            No Applications Found ! Kindly check on browse section apply\n            internship/fulltime role :)\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Applications;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Profile.js",["128","129","130","131","132","133","134","135"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid item container className={classes.inputBox} key={key}>\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item style={{ alignSelf: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [userData, setUserData] = useState();\n  const [open, setOpen] = useState(false);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        if (response.data.education.length > 0) {\n          setEducation(\n            response.data.education.map((edu) => ({\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\n              startYear: edu.startYear ? edu.startYear : \"\",\n              endYear: edu.endYear ? edu.endYear : \"\",\n            }))\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const editDetails = () => {\n    setOpen(true);\n  };\n\n  const handleUpdate = () => {\n    console.log(education);\n\n    let updatedDetails = {\n      ...profileDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"0 30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <h1\n            className=\"border_bottom\"\n            style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n          >\n            Profile\n          </h1>\n        </Grid>\n        <Grid item xs>\n          <Paper\n            style={{\n              padding: \"25px 30px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              borderRadius: \"20px\",\n              border: \"1px solid rgb(224, 222, 222)\",\n            }}\n            elevation={1}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <MultifieldInput\n                education={education}\n                setEducation={setEducation}\n              />\n              <Grid item>\n                <ChipInput\n                  className={classes.inputBox}\n                  label=\"Skills\"\n                  variant=\"outlined\"\n                  helperText=\"Press enter to add skills\"\n                  value={profileDetails.skills}\n                  onAdd={(chip) =>\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: [...profileDetails.skills, chip],\n                    })\n                  }\n                  onDelete={(chip, index) => {\n                    let skills = profileDetails.skills;\n                    skills.splice(index, 1);\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: skills,\n                    });\n                  }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Resume (.pdf)\"\n                  icon={<DescriptionIcon />}\n                  uploadTo={apiList.uploadResume}\n                  handleInput={handleInput}\n                  identifier={\"resume\"}\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Profile Photo (.jpg/.png)\"\n                  icon={<FaceIcon />}\n                  uploadTo={apiList.uploadProfileImage}\n                  handleInput={handleInput}\n                  identifier={\"profile\"}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n      {/* <Modal open={open} onClose={handleClose} className={classes.popupDialog}> */}\n\n      {/* </Modal> */}\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Signup.js",["136","137","138"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Home.js",["139","140","141","142","143","144","145","146","147","148","149"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    console.log(job._id);\n    console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n\n  return (\n    <div className=\"job_card\">\n      <Paper className=\"card\" elevation={1}>\n        <div>\n          <div>\n            <div className=\"job_title\">\n              <div>\n                <h4>{job.title}</h4>\n              </div>\n              <div item>\n                <Rating\n                  value={job.rating !== -1 ? job.rating : null}\n                  readOnly\n                />\n              </div>\n            </div>\n\n            <div className=\"job_type\">\n              <div> Role : {job.jobType}</div>\n              <div>Salary : &#8377; {job.salary} per month</div>\n              <div>\n                Duration :{\" \"}\n                {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n              </div>\n            </div>\n\n            <div className=\"posted_by\">\n              <div>Posted By : {job.recruiter.name}</div>\n              <div>LinkedIn :Click Here</div>\n              <div>Application Deadline : {deadline}</div>\n            </div>\n\n            <div className=\"apply_job\">\n              <div>\n                {job.skillsets.map((skill) => (\n                  <Chip\n                    label={skill}\n                    style={{\n                      margin: \"4px\",\n                      fontSize: \"16px\",\n                    }}\n                  />\n                ))}\n              </div>\n\n              <div className=\"apply\">\n                <button\n                  onClick={() => {\n                    setOpen(true);\n                  }}\n                  disabled={userType() === \"recruiter\"}\n                >\n                  Apply\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"50%\",\n              alignItems: \"center\",\n            }}\n          >\n            <TextField\n              label=\"Write SOP (upto 250 words)\"\n              multiline\n              rows={8}\n              style={{ width: \"100%\", marginBottom: \"30px\" }}\n              variant=\"outlined\"\n              value={sop}\n              onChange={(event) => {\n                if (\n                  event.target.value.split(\" \").filter(function (n) {\n                    return n != \"\";\n                  }).length <= 250\n                ) {\n                  setSop(event.target.value);\n                }\n              }}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => handleApply()}\n            >\n              Submit\n            </Button>\n          </Paper>\n        </Modal>\n      </Paper>\n    </div>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <div className=\"filter_job\">\n      <Paper\n        className=\"card\"\n        // style={{\n        //   padding: \"50px\",\n        //   outline: \"none\",\n        //   minWidth: \"50%\",\n        // }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={3}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"Salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={3}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <button onClick={() => getData()}>Apply</button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </div>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <div className=\"main_conatiner\">\n        <div className=\"home-container\">\n          {jobs.length > 0 ? (\n            <div className=\"searchJob\">\n              <TextField\n                label=\"Search Jobs\"\n                value={searchOptions.query}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    query: event.target.value,\n                  })\n                }\n                onKeyPress={(ev) => {\n                  if (ev.key === \"Enter\") {\n                    getData();\n                  }\n                }}\n                InputProps={{\n                  endAdornment: (\n                    <InputAdornment>\n                      <IconButton onClick={() => getData()}>\n                        <SearchIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                }}\n                style={{ width: \"500px\" }}\n                variant=\"outlined\"\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n          <div className=\"job-container\">\n            {jobs.length > 0 ? (\n              jobs.map((job) => {\n                return <JobTile job={job} />;\n              })\n            ) : (\n              <div className=\"sorry_line\">\n                <h2>Sorry We don't have matching jobs :) </h2>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <FilterPopup\n          open={filterOpen}\n          searchOptions={searchOptions}\n          setSearchOptions={setSearchOptions}\n          handleClose={() => setFilterOpen(false)}\n          getData={() => {\n            getData();\n            setFilterOpen(false);\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js",["150","151","152","153","154","155"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    history.push(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <div\n      style={{\n        width: \"70%\",\n        position: \"relative\",\n        margin: \"auto\",\n        padding: \"10px\",\n      }}\n    >\n      <Paper\n        style={{\n          padding: \"20px\",\n          outline: \"none\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          borderRadius: \"10px\",\n          border: \"1px solid rgb(224, 222, 222)\",\n        }}\n        elevation={1}\n      >\n        <Grid container>\n          <Grid container item xs={12} spacing={1} direction=\"column\">\n            <div className=\"recruiter_title_section\">\n              <div>\n                <h3 style={{ fontWeight: \"bolder\" }}>{job.title}</h3>\n              </div>\n              <div>\n                <Rating\n                  value={job.rating !== -1 ? job.rating : null}\n                  readOnly\n                />\n              </div>\n            </div>\n\n            <div className=\"recruiter_job_type\">\n              <div>Role : {job.jobType}</div>\n              <div>Salary : &#8377; {job.salary} per month</div>\n              <div item>\n                Duration :{\" \"}\n                {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n              </div>\n            </div>\n\n            <div className=\"recruiter_postion\">\n              <div>Date Of Posting: {postedOn.toLocaleDateString()}</div>\n\n              <div>Number of Applicants: {job.maxApplicants}</div>\n              <div>\n                Remaining Number of Positions:{\" \"}\n                {job.maxPositions - job.acceptedCandidates}\n              </div>\n            </div>\n\n            <div>\n              {job.skillsets.map((skill) => (\n                <Chip\n                  label={skill}\n                  style={{\n                    marginRight: \"5px\",\n                    fontFamily: \"Ovo\",\n                    fontWeight: \"bolder\",\n                  }}\n                />\n              ))}\n            </div>\n\n            <div className=\"recruiter_button_container\">\n              <div>\n                <button\n                  className=\"view\"\n                  onClick={() => handleClick(`/job/applications/${job._id}`)}\n                >\n                  View Applications\n                </button>\n              </div>\n\n              <div>\n                <button\n                  onClick={() => {\n                    setOpenUpdate(true);\n                  }}\n                  style={{\n                    background: \"#FC7A1E\",\n                    color: \"#fff\",\n                  }}\n                >\n                  Update Details\n                </button>\n              </div>\n\n              <div>\n                <button\n                  className=\"delete\"\n                  onClick={() => {\n                    setOpen(true);\n                  }}\n                >\n                  Delete Job\n                </button>\n              </div>\n            </div>\n          </Grid>\n        </Grid>\n        <Modal\n          open={open}\n          onClose={handleClose}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"30%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n              Are you sure?\n            </Typography>\n            <Grid container justify=\"center\" spacing={5}>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleDelete()}\n                >\n                  Delete\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleClose()}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Modal>\n        <Modal\n          open={openUpdate}\n          onClose={handleCloseUpdate}\n          className={classes.popupDialog}\n        >\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              minWidth: \"30%\",\n              alignItems: \"center\",\n            }}\n          >\n            <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n              Update Details\n            </Typography>\n            <Grid\n              container\n              direction=\"column\"\n              spacing={3}\n              style={{ margin: \"10px\" }}\n            >\n              <Grid item>\n                <TextField\n                  label=\"Application Deadline\"\n                  type=\"datetime-local\"\n                  value={jobDetails.deadline.substr(0, 16)}\n                  onChange={(event) => {\n                    handleInput(\"deadline\", event.target.value);\n                  }}\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Maximum Number Of Applicants\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                  value={jobDetails.maxApplicants}\n                  onChange={(event) => {\n                    handleInput(\"maxApplicants\", event.target.value);\n                  }}\n                  InputProps={{ inputProps: { min: 1 } }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Positions Available\"\n                  type=\"number\"\n                  variant=\"outlined\"\n                  value={jobDetails.maxPositions}\n                  onChange={(event) => {\n                    handleInput(\"maxPositions\", event.target.value);\n                  }}\n                  InputProps={{ inputProps: { min: 1 } }}\n                  fullWidth\n                />\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\" spacing={5}>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleJobUpdate()}\n                >\n                  Update\n                </Button>\n              </Grid>\n              <Grid item>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ padding: \"10px 50px\" }}\n                  onClick={() => handleCloseUpdate()}\n                >\n                  Cancel\n                </Button>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Modal>\n      </Paper>\n    </div>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <h1\n              className=\"border_bottom\"\n              style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n            >\n              My Jobs\n            </h1>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"500px\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} getData={getData} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MyJobs;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js",["156","157","158","159"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst CreateJobs = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [jobDetails, setJobDetails] = useState({\n    title: \"\",\n    maxApplicants: 100,\n    maxPositions: 30,\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .substr(0, 16),\n    skillsets: [],\n    jobType: \"Full Time\",\n    duration: 0,\n    salary: 0,\n  });\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleUpdate = () => {\n    console.log(jobDetails);\n    axios\n      .post(apiList.jobs, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        setJobDetails({\n          title: \"\",\n          maxApplicants: 100,\n          maxPositions: 30,\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n            .toISOString()\n            .substr(0, 16),\n          skillsets: [],\n          jobType: \"Full Time\",\n          duration: 0,\n          salary: 0,\n        });\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"\" }}\n      >\n        <Grid item>\n          <h1\n            className=\"border_bottom\"\n            style={{ fontWeight: \"bolder\", marginTop: \"-60px\" }}\n          >\n            Add Job\n          </h1>\n        </Grid>\n        <Grid item container xs direction=\"column\" justify=\"center\">\n          <Grid\n            item\n            xs\n            style={{ width: \"70%\", position: \"relative\", margin: \"auto\" }}\n          >\n            <Paper\n              style={{\n                padding: \"30px 20px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                borderTopLeftRadius: \"30px\",\n                borderBottomRightRadius: \"30px\",\n                border: \"1px solid rgb(224, 222, 222)\",\n              }}\n              elevation={1}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={3}\n              >\n                <Grid item>\n                  <TextField\n                    label=\"Title\"\n                    value={jobDetails.title}\n                    onChange={(event) =>\n                      handleInput(\"title\", event.target.value)\n                    }\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <ChipInput\n                    className={classes.inputBox}\n                    label=\"Skills\"\n                    variant=\"outlined\"\n                    helperText=\"Press enter to add skills\"\n                    value={jobDetails.skillsets}\n                    onAdd={(chip) =>\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: [...jobDetails.skillsets, chip],\n                      })\n                    }\n                    onDelete={(chip, index) => {\n                      let skillsets = jobDetails.skillsets;\n                      skillsets.splice(index, 1);\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: skillsets,\n                      });\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    select\n                    label=\"Job Type\"\n                    variant=\"outlined\"\n                    value={jobDetails.jobType}\n                    onChange={(event) => {\n                      handleInput(\"jobType\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\n                  </TextField>\n                </Grid>\n                <Grid item>\n                  <TextField\n                    select\n                    label=\"Duration\"\n                    variant=\"outlined\"\n                    value={jobDetails.duration}\n                    onChange={(event) => {\n                      handleInput(\"duration\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value={0}>Flexible</MenuItem>\n                    <MenuItem value={1}>1 Month</MenuItem>\n                    <MenuItem value={2}>2 Months</MenuItem>\n                    <MenuItem value={3}>3 Months</MenuItem>\n                    <MenuItem value={4}>4 Months</MenuItem>\n                    <MenuItem value={5}>5 Months</MenuItem>\n                    <MenuItem value={6}>6 Months</MenuItem>\n                  </TextField>\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Salary\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.salary}\n                    onChange={(event) => {\n                      handleInput(\"salary\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 0 } }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Application Deadline\"\n                    type=\"datetime-local\"\n                    value={jobDetails.deadline}\n                    onChange={(event) => {\n                      handleInput(\"deadline\", event.target.value);\n                    }}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Maximum Number Of Applicants\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxApplicants}\n                    onChange={(event) => {\n                      handleInput(\"maxApplicants\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Positions Available\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxPositions}\n                    onChange={(event) => {\n                      handleInput(\"maxPositions\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n              <button\n                className=\"profile_btn_recruiter\"\n                onClick={() => handleUpdate()}\n              >\n                Create Job\n              </button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default CreateJobs;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["160","161","162","163","164","165","166","167","168"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\Profile.js",["169","170","171","172","173"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleUpdate = () => {\n    let updatedDetails = {\n      ...profileDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <h1\n            className=\"border_bottom\"\n            style={{ fontWeight: \"bolder\", marginTop: \"-30px\" }}\n          >\n            Profile\n          </h1>\n        </Grid>\n        <Grid item xs style={{ width: \"70%\" }}>\n          <Paper\n            style={{\n              padding: \"30px 20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              borderTopLeftRadius: \"30px\",\n              borderBottomRightRadius: \"30px\",\n              border: \"1px solid rgb(224, 222, 222)\",\n              //   width: \"60%\",\n            }}\n            elevation={1}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                  style={{ width: \"100%\" }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Bio (upto 250 words)\"\n                  multiline\n                  rows={8}\n                  style={{ width: \"100%\" }}\n                  variant=\"outlined\"\n                  value={profileDetails.bio}\n                  onChange={(event) => {\n                    if (\n                      event.target.value.split(\" \").filter(function (n) {\n                        return n != \"\";\n                      }).length <= 250\n                    ) {\n                      handleInput(\"bio\", event.target.value);\n                    }\n                  }}\n                />\n              </Grid>\n              <Grid\n                item\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <PhoneInput\n                  country={\"in\"}\n                  value={phone}\n                  onChange={(phone) => setPhone(phone)}\n                  style={{ width: \"auto\" }}\n                />\n              </Grid>\n            </Grid>\n            <button\n              className=\"profile_btn_recruiter\"\n              // variant=\"contained\"\n              // color=\"primary\"\n              // style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js",["174","175","176","177","178","179"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\MessagePopup.js",["180"],"import { Snackbar, Slide } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst MessagePopup = (props) => {\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    props.setOpen(false);\n  };\n  return (\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\n      <Alert onClose={handleClose} severity={props.severity}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default MessagePopup;\n","C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\HomePage.js",[],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\MakeCard.js",["181"],"C:\\Users\\SHUBHAM GUPTA\\Desktop\\online-job-portal\\frontend\\src\\component\\Footer.js",[],{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":4,"column":3,"nodeType":"188","messageId":"189","endLine":4,"endColumn":12},{"ruleId":"186","severity":1,"message":"190","line":5,"column":3,"nodeType":"188","messageId":"189","endLine":5,"endColumn":9},{"ruleId":"186","severity":1,"message":"191","line":6,"column":3,"nodeType":"188","messageId":"189","endLine":6,"endColumn":13},{"ruleId":"192","severity":1,"message":"193","line":16,"column":6,"nodeType":"194","endLine":16,"endColumn":8,"suggestions":"195"},{"ruleId":"186","severity":1,"message":"190","line":1,"column":10,"nodeType":"188","messageId":"189","endLine":1,"endColumn":16},{"ruleId":"186","severity":1,"message":"196","line":6,"column":3,"nodeType":"188","messageId":"189","endLine":6,"endColumn":13},{"ruleId":"186","severity":1,"message":"197","line":7,"column":3,"nodeType":"188","messageId":"189","endLine":7,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":12},{"ruleId":"186","severity":1,"message":"198","line":13,"column":3,"nodeType":"188","messageId":"189","endLine":13,"endColumn":9},{"ruleId":"186","severity":1,"message":"199","line":14,"column":3,"nodeType":"188","messageId":"189","endLine":14,"endColumn":19},{"ruleId":"186","severity":1,"message":"200","line":15,"column":3,"nodeType":"188","messageId":"189","endLine":15,"endColumn":12},{"ruleId":"186","severity":1,"message":"201","line":16,"column":3,"nodeType":"188","messageId":"189","endLine":16,"endColumn":11},{"ruleId":"186","severity":1,"message":"202","line":17,"column":3,"nodeType":"188","messageId":"189","endLine":17,"endColumn":11},{"ruleId":"186","severity":1,"message":"203","line":122,"column":9,"nodeType":"188","messageId":"189","endLine":122,"endColumn":17},{"ruleId":"192","severity":1,"message":"204","line":232,"column":6,"nodeType":"194","endLine":232,"endColumn":8,"suggestions":"205"},{"ruleId":"186","severity":1,"message":"191","line":5,"column":3,"nodeType":"188","messageId":"189","endLine":5,"endColumn":13},{"ruleId":"186","severity":1,"message":"206","line":6,"column":3,"nodeType":"188","messageId":"189","endLine":6,"endColumn":8},{"ruleId":"186","severity":1,"message":"207","line":109,"column":10,"nodeType":"188","messageId":"189","endLine":109,"endColumn":18},{"ruleId":"186","severity":1,"message":"208","line":109,"column":20,"nodeType":"188","messageId":"189","endLine":109,"endColumn":31},{"ruleId":"186","severity":1,"message":"209","line":110,"column":10,"nodeType":"188","messageId":"189","endLine":110,"endColumn":14},{"ruleId":"192","severity":1,"message":"204","line":137,"column":6,"nodeType":"194","endLine":137,"endColumn":8,"suggestions":"210"},{"ruleId":"186","severity":1,"message":"211","line":169,"column":9,"nodeType":"188","messageId":"189","endLine":169,"endColumn":20},{"ruleId":"186","severity":1,"message":"212","line":173,"column":9,"nodeType":"188","messageId":"189","endLine":173,"endColumn":20},{"ruleId":"186","severity":1,"message":"191","line":6,"column":3,"nodeType":"188","messageId":"189","endLine":6,"endColumn":13},{"ruleId":"186","severity":1,"message":"213","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":8},{"ruleId":"214","severity":1,"message":"215","line":460,"column":34,"nodeType":"216","messageId":"217","endLine":460,"endColumn":36},{"ruleId":"186","severity":1,"message":"200","line":15,"column":3,"nodeType":"188","messageId":"189","endLine":15,"endColumn":12},{"ruleId":"186","severity":1,"message":"218","line":20,"column":8,"nodeType":"188","messageId":"189","endLine":20,"endColumn":18},{"ruleId":"186","severity":1,"message":"219","line":23,"column":8,"nodeType":"188","messageId":"189","endLine":23,"endColumn":22},{"ruleId":"214","severity":1,"message":"215","line":187,"column":30,"nodeType":"216","messageId":"217","endLine":187,"endColumn":32},{"ruleId":"186","severity":1,"message":"220","line":210,"column":9,"nodeType":"188","messageId":"189","endLine":210,"endColumn":16},{"ruleId":"186","severity":1,"message":"209","line":211,"column":11,"nodeType":"188","messageId":"189","endLine":211,"endColumn":15},{"ruleId":"186","severity":1,"message":"211","line":211,"column":17,"nodeType":"188","messageId":"189","endLine":211,"endColumn":28},{"ruleId":"192","severity":1,"message":"204","line":565,"column":6,"nodeType":"194","endLine":565,"endColumn":8,"suggestions":"221"},{"ruleId":"214","severity":1,"message":"215","line":581,"column":33,"nodeType":"216","messageId":"217","endLine":581,"endColumn":35},{"ruleId":"214","severity":1,"message":"215","line":587,"column":33,"nodeType":"216","messageId":"217","endLine":587,"endColumn":35},{"ruleId":"214","severity":1,"message":"215","line":593,"column":32,"nodeType":"216","messageId":"217","endLine":593,"endColumn":34},{"ruleId":"186","severity":1,"message":"200","line":15,"column":3,"nodeType":"188","messageId":"189","endLine":15,"endColumn":12},{"ruleId":"186","severity":1,"message":"218","line":21,"column":8,"nodeType":"188","messageId":"189","endLine":21,"endColumn":18},{"ruleId":"192","severity":1,"message":"204","line":756,"column":6,"nodeType":"194","endLine":756,"endColumn":8,"suggestions":"222"},{"ruleId":"214","severity":1,"message":"215","line":772,"column":33,"nodeType":"216","messageId":"217","endLine":772,"endColumn":35},{"ruleId":"214","severity":1,"message":"215","line":778,"column":33,"nodeType":"216","messageId":"217","endLine":778,"endColumn":35},{"ruleId":"214","severity":1,"message":"215","line":784,"column":32,"nodeType":"216","messageId":"217","endLine":784,"endColumn":34},{"ruleId":"186","severity":1,"message":"223","line":1,"column":22,"nodeType":"188","messageId":"189","endLine":1,"endColumn":31},{"ruleId":"186","severity":1,"message":"190","line":3,"column":3,"nodeType":"188","messageId":"189","endLine":3,"endColumn":9},{"ruleId":"186","severity":1,"message":"191","line":5,"column":3,"nodeType":"188","messageId":"189","endLine":5,"endColumn":13},{"ruleId":"186","severity":1,"message":"206","line":6,"column":3,"nodeType":"188","messageId":"189","endLine":6,"endColumn":8},{"ruleId":"186","severity":1,"message":"197","line":7,"column":3,"nodeType":"188","messageId":"189","endLine":7,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":12},{"ruleId":"186","severity":1,"message":"198","line":13,"column":3,"nodeType":"188","messageId":"189","endLine":13,"endColumn":9},{"ruleId":"186","severity":1,"message":"199","line":14,"column":3,"nodeType":"188","messageId":"189","endLine":14,"endColumn":19},{"ruleId":"186","severity":1,"message":"200","line":15,"column":3,"nodeType":"188","messageId":"189","endLine":15,"endColumn":12},{"ruleId":"186","severity":1,"message":"201","line":16,"column":3,"nodeType":"188","messageId":"189","endLine":16,"endColumn":11},{"ruleId":"186","severity":1,"message":"224","line":20,"column":10,"nodeType":"188","messageId":"189","endLine":20,"endColumn":19},{"ruleId":"186","severity":1,"message":"203","line":450,"column":9,"nodeType":"188","messageId":"189","endLine":450,"endColumn":17},{"ruleId":"192","severity":1,"message":"204","line":751,"column":6,"nodeType":"194","endLine":751,"endColumn":8,"suggestions":"225"},{"ruleId":"186","severity":1,"message":"190","line":3,"column":3,"nodeType":"188","messageId":"189","endLine":3,"endColumn":9},{"ruleId":"186","severity":1,"message":"191","line":5,"column":3,"nodeType":"188","messageId":"189","endLine":5,"endColumn":13},{"ruleId":"186","severity":1,"message":"206","line":6,"column":3,"nodeType":"188","messageId":"189","endLine":6,"endColumn":8},{"ruleId":"192","severity":1,"message":"204","line":53,"column":6,"nodeType":"194","endLine":53,"endColumn":8,"suggestions":"226"},{"ruleId":"214","severity":1,"message":"215","line":173,"column":34,"nodeType":"216","messageId":"217","endLine":173,"endColumn":36},{"ruleId":"186","severity":1,"message":"197","line":7,"column":3,"nodeType":"188","messageId":"189","endLine":7,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":12},{"ruleId":"186","severity":1,"message":"198","line":13,"column":3,"nodeType":"188","messageId":"189","endLine":13,"endColumn":9},{"ruleId":"186","severity":1,"message":"200","line":15,"column":3,"nodeType":"188","messageId":"189","endLine":15,"endColumn":12},{"ruleId":"186","severity":1,"message":"201","line":16,"column":3,"nodeType":"188","messageId":"189","endLine":16,"endColumn":11},{"ruleId":"192","severity":1,"message":"204","line":711,"column":6,"nodeType":"194","endLine":711,"endColumn":8,"suggestions":"227"},{"ruleId":"186","severity":1,"message":"228","line":1,"column":20,"nodeType":"188","messageId":"189","endLine":1,"endColumn":25},{"ruleId":"186","severity":1,"message":"229","line":35,"column":9,"nodeType":"188","messageId":"189","endLine":35,"endColumn":14},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'TextField' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Typography' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.","ArrayExpression",["232"],"'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.","'colorSet' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["233"],"'Modal' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["234"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.","'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Pagination' is defined but never used.","'FilterListIcon' is defined but never used.","'classes' is assigned a value but never used.",["235"],["236"],"'useEffect' is defined but never used.","'useParams' is defined but never used.",["237"],["238"],["239"],"'Slide' is defined but never used.","'theme' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"242","fix":"244"},{"desc":"242","fix":"245"},{"desc":"242","fix":"246"},{"desc":"242","fix":"247"},{"desc":"242","fix":"248"},{"desc":"242","fix":"249"},"Update the dependencies array to be: [setPopup]",{"range":"250","text":"251"},"Update the dependencies array to be: [getData]",{"range":"252","text":"253"},{"range":"254","text":"253"},{"range":"255","text":"253"},{"range":"256","text":"253"},{"range":"257","text":"253"},{"range":"258","text":"253"},{"range":"259","text":"253"},[422,424],"[setPopup]",[6018,6020],"[getData]",[3404,3406],[16926,16928],[22526,22528],[22553,22555],[1039,1041],[20490,20492]]